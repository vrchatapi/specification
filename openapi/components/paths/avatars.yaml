openapi: 3.0.3
info:
  title: avatars
  version: '1.0'
  description: Avatars Docs Here
paths:
  '/users/{userId}/avatar':
    get:
      summary: Get Own Avatar
      tags:
        - avatars
      responses:
        '200':
          $ref: ../responses/avatars/AvatarResponse.yaml
        '401':
          $ref: ../responses/MissingCredentialsError.yaml
        '403':
          $ref: ../responses/avatars/AvatarSeeOtherUserCurrentAvatarError.yaml
      operationId: getOwnAvatar
      x-codeSamples:
        $ref: '../codeSamples/avatars.yaml#/~1users~1{userId}~1avatar/get'
      security:
        - authCookie: []
      description: Get the current avatar for the user. This will return an error for any other user than the one logged in.
    parameters:
      - $ref: ../parameters.yaml#/userId
  /avatars/favorites:
    get:
      summary: List Favorited Avatars
      tags:
        - avatars
      x-codeSamples:
        $ref: "../codeSamples/avatars.yaml#/~1avatars~1favorites/get"
      responses:
        '200':
          $ref: ../responses/avatars/AvatarListResponse.yaml
        '401':
          $ref: ../responses/MissingCredentialsError.yaml
        '403':
          $ref: ../responses/avatars/AvatarSeeOtherUserFavoritesError.yaml
      operationId: getFavoritedAvatars
      security:
        - authCookie: []
      parameters:
        - $ref: ../parameters.yaml#/featured
        - $ref: ../parameters.yaml#/sort
        - $ref: ../parameters.yaml#/number
        - $ref: ../parameters.yaml#/order
        - $ref: ../parameters.yaml#/offset
        - $ref: ../parameters.yaml#/search
        - $ref: ../parameters.yaml#/tag
        - $ref: ../parameters.yaml#/notag
        - $ref: ../parameters.yaml#/releaseStatus
        - $ref: ../parameters.yaml#/maxUnityVersion
        - $ref: ../parameters.yaml#/minUnityVersion
        - $ref: ../parameters.yaml#/platform
        - $ref: ../parameters.yaml#/userIdAdmin
      description: Search and list favorited avatars by query filters.
  /avatars/licensed:
    get:
      summary: List Licensed Avatars
      tags:
        - avatars
      x-codeSamples:
        $ref: "../codeSamples/avatars.yaml#/~1avatars~1licensed/get"
      responses:
        '200':
          $ref: ../responses/avatars/AvatarListResponse.yaml
        '401':
          $ref: ../responses/MissingCredentialsError.yaml
      operationId: getLicensedAvatars
      security:
        - authCookie: []
      parameters:
        - $ref: ../parameters.yaml#/number
        - $ref: ../parameters.yaml#/offset
      description: List licensed avatars.
  /avatars:
    get:
      summary: Search Avatars
      tags:
        - avatars
      x-codeSamples:
        $ref: "../codeSamples/avatars.yaml#/~1avatars/get"
      responses:
        '200':
          $ref: ../responses/avatars/AvatarListResponse.yaml
        '401':
          $ref: ../responses/MissingCredentialsError.yaml
      operationId: searchAvatars
      security:
        - authCookie: []
      parameters:
        - $ref: ../parameters.yaml#/featured
        - $ref: ../parameters.yaml#/sort
        - schema:
            type: string
            enum:
              - me
          in: query
          required: false
          name: user
          description: Set to `me` for searching own avatars.
        - $ref: ../parameters.yaml#/userIdQuery
        - $ref: ../parameters.yaml#/number
        - $ref: ../parameters.yaml#/order
        - $ref: ../parameters.yaml#/offset
        - $ref: ../parameters.yaml#/tag
        - $ref: ../parameters.yaml#/notag
        - $ref: ../parameters.yaml#/releaseStatus
        - $ref: ../parameters.yaml#/maxUnityVersion
        - $ref: ../parameters.yaml#/minUnityVersion
        - $ref: ../parameters.yaml#/platform
      description: Search and list avatars by query filters. You can only search your own or featured avatars. It is not possible as a normal user to search other peoples avatars.
    post:
      summary: Create Avatar
      operationId: createAvatar
      security:
        - authCookie: []
      x-codeSamples:
        $ref: "../codeSamples/avatars.yaml#/~1avatars/post"
      responses:
        '200':
          $ref: ../responses/avatars/AvatarResponse.yaml
        '401':
          $ref: ../responses/FeaturedSetNotAdminError.yaml
      tags:
        - avatars
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../requests/CreateAvatarRequest.yaml
      description: Create an avatar. It's possible to optionally specify a ID if you want a custom one. Attempting to create an Avatar with an already claimed ID will result in a DB error.
  '/avatars/{avatarId}':
    parameters:
      - $ref: ../parameters.yaml#/avatarId
    get:
      summary: Get Avatar
      tags:
        - avatars
      x-codeSamples:
        $ref: "../codeSamples/avatars.yaml#/~1avatars~1{avatarId}/get"
      responses:
        '200':
          $ref: ../responses/avatars/AvatarResponse.yaml
        '401':
          $ref: ../responses/MissingCredentialsError.yaml
        '404':
          $ref: ../responses/avatars/AvatarNotFoundError.yaml
      operationId: getAvatar
      security:
        - authCookie: []
      description: Get information about a specific Avatar.
    put:
      summary: Update Avatar
      operationId: updateAvatar
      security:
        - authCookie: []
      x-codeSamples:
        $ref: "../codeSamples/avatars.yaml#/~1avatars~1{avatarId}/put"
      responses:
        '200':
          $ref: ../responses/avatars/AvatarResponse.yaml
        '401':
          $ref: ../responses/MissingCredentialsError.yaml
        '404':
          $ref: ../responses/avatars/AvatarNotFoundError.yaml
      description: Update information about a specific avatar.
      tags:
        - avatars
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../requests/UpdateAvatarRequest.yaml
    delete:
      summary: Delete Avatar
      operationId: deleteAvatar
      security:
        - authCookie: []
      x-codeSamples:
        $ref: "../codeSamples/avatars.yaml#/~1avatars~1{avatarId}/delete"
      responses:
        '200':
          $ref: ../responses/avatars/AvatarResponse.yaml
        '401':
          $ref: ../responses/MissingCredentialsError.yaml
        '404':
          $ref: ../responses/avatars/AvatarNotFoundError.yaml
      tags:
        - avatars
      description: 'Delete an avatar. Notice an avatar is never fully "deleted", only its ReleaseStatus is set to "hidden" and the linked Files are deleted. The AvatarID is permanently reserved.'
  '/avatars/{avatarId}/select':
    parameters:
      - $ref: ../parameters.yaml#/avatarId
    put:
      summary: Select Avatar
      tags:
        - avatars
      x-codeSamples:
        $ref: "../codeSamples/avatars.yaml#/~1avatars~1{avatarId}~1select/put"
      responses:
        '200':
          $ref: ../responses/users/CurrentUserResponse.yaml
        '401':
          $ref: ../responses/MissingCredentialsError.yaml
        '404':
          $ref: ../responses/avatars/AvatarNotFoundError.yaml
      operationId: selectAvatar
      security:
        - authCookie: []
      description: Switches into that avatar.
  '/avatars/{avatarId}/selectFallback':
    parameters:
      - $ref: ../parameters.yaml#/avatarId
    put:
      summary: Select Fallback Avatar
      tags:
        - avatars
      x-codeSamples:
        $ref: "../codeSamples/avatars.yaml#/~1avatars~1{avatarId}~1selectFallback/put"
      responses:
        '200':
          $ref: ../responses/users/CurrentUserResponse.yaml
        '401':
          $ref: ../responses/MissingCredentialsError.yaml
        '403':
          $ref: ../responses/avatars/AvatarNotTaggedAsFallbackError.yaml
        '404':
          $ref: ../responses/avatars/AvatarNotFoundError.yaml
      operationId: selectFallbackAvatar
      security:
        - authCookie: []
      description: Switches into that avatar as your fallback avatar.
  '/avatars/{avatarId}/impostor/enqueue':
    parameters:
      - $ref: ../parameters.yaml#/avatarId
    post:
      summary: Enqueue Impostor generation
      tags:
        - avatars
      x-codeSamples:
        $ref: "../codeSamples/avatars.yaml#/~1avatars~1{avatarId}~1impostor~1enqueue/post"
      responses:
        '200':
          $ref: ../responses/avatars/AvatarImpostorEnqueueResponse.yaml
        '401':
          $ref: ../responses/MissingCredentialsError.yaml
        '404':
          $ref: ../responses/avatars/AvatarNotFoundError.yaml
      operationId: enqueueImpostor
      security:
        - authCookie: []
      description: Enqueue Impostor generation for that avatar.
  /avatars/impostor/queue/stats:
    get:
      summary: Get Impostor Queue Stats
      tags:
        - avatars
      x-codeSamples:
        $ref: "../codeSamples/avatars.yaml#/~1avatars~1impostor~1queue~1stats/get"
      responses:
        '200':
          $ref: ../responses/avatars/AvatarImpostorQueueStatsResponse.yaml
        '401':
          $ref: ../responses/MissingCredentialsError.yaml
      operationId: getImpostorQueueStats
      security:
        - authCookie: []
      description: Gets service stats for queued impostor.
  '/avatars/{avatarId}/impostor':
    parameters:
      - $ref: ../parameters.yaml#/avatarId
    delete:
      summary: Delete generated Impostor
      tags:
        - avatars
      x-codeSamples:
        $ref: "../codeSamples/avatars.yaml#/~1avatars~1{avatarId}~1impostor/delete"
      responses:
        '200':
          description: The Impostors generated for that avatar are deleted.
        '401':
          $ref: ../responses/MissingCredentialsError.yaml
        '404':
          $ref: ../responses/avatars/AvatarNotFoundError.yaml
      operationId: deleteImpostor
      security:
        - authCookie: []
      description: Delete generated Impostor for that avatar.
tags:
  $ref: ../tags.yaml
components:
  securitySchemes:
    $ref: ../securitySchemes.yaml